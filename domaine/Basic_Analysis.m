classdef Basic_Analysis < handle
    
    properties
        
        Util = Utility.instance();
        
    end
    
    methods (Access = public)
        
        function obj = Basic_Analysis()
            
        end
        
        function importAnatomy(~, subjectName, anatomyPath, anatomyFileFormat)
            bst_process('CallProcess', 'process_import_anatomy', [], [], ...
            'subjectname', subjectName, ...
            'mrifile', {anatomyPath, anatomyFileFormat}, ...
            'nvertices', 15000, ...
            'nas', [], ...
            'lpa', [], ...
            'rpa', [], ...
            'ac', [], ...
            'pc', [], ...
            'ih', []);
        end
        
        function sFiles = reviewRawFiles(~, SubjectName, RawFilePath, FileFormat, ChannelAlign)
            sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
                    'subjectname',  SubjectName, ...
                    'datafile',     {RawFilePath, FileFormat}, ...
                    'channelreplace', 1, ...
                    'channelalign', ChannelAlign, ... % Align channel on MRI using fiducial points
                    'evtmode',     'value');
        end
         
        function sFiles = notchFilter(~, sFiles, sensorType, frequence)
            
            % Get date from original file
            %date = obj.Util.getDateFromBrainstormStudyMAT(sFiles);
            
            sFiles = bst_process('CallProcess', 'process_notch', sFiles, [], ...
                    'sensortypes', sensorType, ...
                    'freqlist',    frequence, ...
                    'cutoffW',     1, ...
                    'useold',      0, ...
                    'read_all',    0);
            
            % Modify date in Brainstormstudy.mat of new file
            %obj.Util.modifyBrainstormStudyMATDate(sFiles, date); 
        end
        
        function sFiles = bandPassFilter(~, sFiles, sensorType, frequence)
            
            % Get date from original file
            %date = obj.Util.getDateFromBrainstormStudyMAT(sFiles);
            
            sFiles = bst_process('CallProcess', 'process_bandpass', sFiles, [], ...
                'sensortypes', sensorType, ...
                'highpass',    frequence(1), ...
                'lowpass',     frequence(2), ...    % il faut inverse le High and Low ... ?
                'tranband',    0, ...
                'attenuation', 'strict', ...  % 60dB
                'ver',         '2019', ...  % 2019
                'mirror',      0, ...
                'read_all',    0);
            
            % Modify date in Brainstormstudy.mat of new file
            %obj.Util.modifyBrainstormStudyMATDate(sFiles, date); 
        end
        
        function sFiles = powerSpectrumDensity(~, sFiles, sensorType, windowLength)
            bst_process('CallProcess', 'process_psd', sFiles, [], ...
                'timewindow',  [], ...
                'win_length',  windowLength, ...
                'win_overlap', 50, ...
                'clusters',    {}, ...
                'sensortypes', sensorType, ...
                'edit', struct(...
                'Comment',    'Power', ...
                'TimeBands',  [], ...
                'Freqs',      [], ...
                'ClusterFuncTime', 'none', ...
                'Measure',    'power', ...
                'Output',     'all', ...
                'SaveKernel', 0));
        end
        
        function sFiles = detectCardiacArtifact(~, sFiles, channelName, eventName)
                        
            bst_process('CallProcess', 'process_evt_detect_ecg', sFiles, [], ...
                        'channelname', channelName, ...
                        'timewindow',  [], ...
                        'eventname',   eventName);                                
        end
        
        function sFiles = detectBlinkArtifact(~, sFiles, channelName, eventName)
            
            bst_process('CallProcess', 'process_evt_detect_eog', sFiles, [], ...
                        'channelname', channelName, ...
                        'timewindow',  [], ...
                        'eventname',   eventName);
        end
        
        function sFiles = detectOtherArtifact(~, sFiles, sensorType, LowFreq, HighFreq)
            
            bst_process('CallProcess', 'process_evt_detect_badsegment', sFiles, [], ...
                        'timewindow',  [], ...
                        'sensortypes', sensorType, ...
                        'threshold',   3, ...
                        'isLowFreq',   LowFreq, ...   % 0 ou 1: detect eyes/teeth movements
                        'isHighFreq',  HighFreq);      % 0 ou 1: detect muscular/sensor artifacts

        end
        
        function sFiles = importEventFromFile(~, sFiles, filePath, eventName)
            bst_process('CallProcess', 'process_evt_import', sFiles, [], ...
                'evtfile', {filePath, 'ARRAY-TIMES'}, ...
                'evtname', eventName);
        end
                
        function sFiles = renameEvent(~, sFiles, oldName, newName)
            bst_process('CallProcess', 'process_evt_rename', sFiles, [], ...
                'src',  oldName, ...
                'dest', newName);
        end
        
        function sFiles = deleteEvent(~, sFiles, eventName)
            bst_process('CallProcess', 'process_evt_delete', sFiles, [], ...
                    'eventname', eventName);
        end
        
        function sFiles = ica(obj, sFiles, nbComponents, sensorType)

            bst_process('CallProcess', 'process_ica', sFiles, [], ...
                'timewindow', [], ...
                'eventname', '', ...
                'eventtime', [0, 0], ...
                'bandpass', [0, 0], ...
                'nicacomp', nbComponents, ... % modifi ici!
                'sensortypes', sensorType, ...
                'icasort',      '', ...
                'usessp', 1, ...
                'ignorebad', 1, ...
                'saveerp', 0, ...
                'method', 1, ...
                'select', []);

            viewComponents(obj, sFiles);
        end
        
        function viewComponents(~, sFiles)
            for i = 1:length(sFiles)
                win = view_timeseries(sFiles(i).FileName);
                panel_ssp_selection('OpenRaw');
                waitfor(msgbox("Click when you are done choosing. It will skip to the next study."));
                close(win);
            end
        end
        
        function exportToBids(~, sFiles, BIDSpath)
            
            bst_process('CallProcess', 'process_export_bids', sFiles, [], ...
                     'bidsdir',       {BIDSpath, 'BIDS'}, ...
                     'subscheme',     2, ...  % Number index
                     'sesscheme',     1, ...  % Acquisition date
                     'emptyroom',     'emptyroom, noise', ...
                     'defacemri',     0, ...
                     'overwrite',     0, ...
                     'powerline',     2, ...  % 60 Hz
                     'dewarposition', 'Upright', ...
                     'eegreference',  'Cz', ...
                     'edit',          struct(...
                     'ProjName',    [], ...
                     'ProjID',      [], ...
                     'ProjDesc',    [], ...
                     'Categories',  [], ...
                     'JsonDataset', ['{' 10 '  "License": "PD"' 10 '}'], ...
                     'JsonMeg',     ['{' 10 '  "TaskDescription": "My task"' 10 '}']));
        end
       
        function sFiles = importEvents(~, sFile, subjectName, event, epochTime)

            sFiles = bst_process('CallProcess', 'process_import_data_event', sFile, [], ...
            'subjectname', subjectName, ...
            'condition',   '', ...
            'eventname',   event, ...
            'timewindow',  [], ...
            'epochtime',   epochTime, ...
            'createcond',  1, ...
             'ignoreshort', 1, ...
             'usectfcomp',  1, ...
             'usessp',      1, ...
             'freq',        [], ...
             'baseline',    []); 
        end
        
        function sFiles = rejectBadTrials(~, sFiles, megGrad, megMagneto, eeg, seeg_ecog, eog, ecg)

            sFiles = bst_process('CallProcess', 'process_detectbad', sFiles, [], ...
                'timewindow', [], ...
                'meggrad',    megGrad, ...
                'megmag',     megMagneto, ...
                'eeg',        eeg, ...
                'ieeg',       seeg_ecog, ...
                'eog',        eog, ...
                'ecg',        ecg, ...
                'rejectmode', 2);  % Reject the entire trial
        end
        
        function sFiles = average(~, sFiles, averageType, averageFunction)

            sFiles = bst_process('CallProcess', 'process_average', sFiles, [], ...
                'avgtype',       averageType, ...  % By folder (grand average)
                'avg_func',      averageFunction, ...  % Average absolute values:  mean(abs(x))
                'weighted',      0, ...
                'keepevents',    0);

        end
       
        function sFiles = computeSources(~, sFiles)
            sFiles = bst_process('CallProcess', 'process_inverse_2018', sFiles, [], ...
                                'output',  1, ...  % Kernel only: shared
                                'inverse', struct(...
                                 'NoiseCovMat',    [], ...
                                 'DataCovMat',     [], ...
                                 'ChannelTypes',   {{}}, ...
                                 'InverseMethod',  'minnorm', ...
                                 'InverseMeasure', 'amplitude', ...
                                 'SourceOrient',   {{'fixed'}}, ...
                                 'Loose',          0.2, ...
                                 'UseDepth',       1, ...
                                 'WeightExp',      0.5, ...
                                 'WeightLimit',    10, ...
                                 'NoiseMethod',    'reg', ...
                                 'NoiseReg',       0.1, ...
                                 'SnrMethod',      'fixed', ...
                                 'SnrRms',         1000, ...
                                 'SnrFixed',       3, ...
                                 'FunctionName',   []));
        end
        
    end
end

